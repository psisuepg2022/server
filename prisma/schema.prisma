generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Clinic {
  id    String @id @db.Uuid
  email String @unique @db.VarChar(100)
  name  String @map("nome") @db.VarChar(100)
  code  Int    @default(autoincrement()) @map("codigo_base")

  people Person[]

  @@map("clinica")
}

model Person {
  id            String   @id @db.Uuid
  email         String?  @unique @db.VarChar(100)
  name          String   @map("nome") @db.VarChar(100)
  domainClass   String   @map("classe_dominio") @db.VarChar(32)
  CPF           String?  @unique @map("cpf") @db.VarChar(11)
  birthDate     DateTime @map("data_nascimento") @db.Date
  contactNumber String?  @map("telefone") @db.VarChar(11)
  active        Boolean  @default(true) @map("ativo")
  createdAt     DateTime @default(now()) @map("data_criacao") @db.Timestamp()

  clinicId String @map("id_clinica") @db.Uuid
  clinic   Clinic @relation(fields: [clinicId], references: [id])

  address Address?
  user    User?
  patient Patient?
  liables Liable[]

  @@map("pessoa")
}

model Address {
  id         String  @id @db.Uuid
  city       String  @map("cidade") @db.VarChar(100)
  district   String? @map("bairro") @db.VarChar(100)
  state      String  @map("estado") @db.VarChar(100)
  publicArea String  @map("logradouro") @db.VarChar(255)
  zipCode    String  @map("CEP") @db.VarChar(8)

  personId String @unique @map("id_pessoa") @db.Uuid
  person   Person @relation(fields: [personId], references: [id])

  @@map("endereco")
}

model User {
  userName      String  @unique @map("nome_usuario") @db.VarChar(100)
  blocked       Boolean @default(false) @map("bloqueado")
  loginAttempts Int     @default(0) @map("tentativas")
  password      String  @map("senha") @db.VarChar(255)
  accessCode    Int     @default(autoincrement()) @map("codigo_acesso")

  id     String @id @unique @db.Uuid
  person Person @relation(fields: [id], references: [id])

  roleId Int  @map("id_papel_usuario")
  role   Role @relation(fields: [roleId], references: [id])

  professional Professional?
  Appointment  Appointment[]

  @@map("usuario")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique @map("nome") @db.VarChar(36)

  users       User[]
  permissions Permission[]

  @@map("papel_usuario")
}

model Permission {
  id   Int    @id @default(autoincrement())
  name String @unique @map("nome") @db.VarChar(36)

  roleId Int  @map("id_papel_usuario")
  role   Role @relation(fields: [roleId], references: [id])

  @@map("permissoes")
}

model Patient {
  gender        Int @map("genero") @db.SmallInt
  maritalStatus Int @map("estado_civil") @db.SmallInt

  id     String @id @unique @db.Uuid
  person Person @relation(fields: [id], references: [id])

  liable      Liable?
  Appointment Appointment[]

  @@map("paciente")
}

model Professional {
  profession     String  @map("profissao") @db.VarChar(255)
  specialization String? @map("especializacao") @db.VarChar(255)
  baseDuration   Int     @default(60) @map("duracao_base") @db.Integer
  registry       String  @map("registro") @db.VarChar(255)

  id   String @id @unique @db.Uuid
  user User   @relation(fields: [id], references: [id])

  WeeklySchedule WeeklySchedule[]
  ScheduleLock   ScheduleLock[]
  Appointment    Appointment[]

  @@map("profissional")
}

model Liable {
  personId String @map("id_pessoa") @db.Uuid
  person   Person @relation(fields: [personId], references: [id])

  patientId String  @id @map("id_paciente") @db.Uuid
  patient   Patient @relation(fields: [patientId], references: [id])

  @@map("responsavel")
}

model WeeklySchedule {
  id           String   @id @db.Uuid
  startTime    DateTime @map("horario_inicio") @db.Time()
  endTime      DateTime @map("horario_fim") @db.Time()
  dayOfTheWeek Int      @map("dia_semana") @db.SmallInt

  professionalId String       @map("id_profissional") @db.Uuid
  professional   Professional @relation(fields: [professionalId], references: [id])

  WeeklyScheduleLocks WeeklyScheduleLock[]

  @@map("agenda_semanal")
}

model WeeklyScheduleLock {
  id        String   @id @db.Uuid
  startTime DateTime @map("horario_inicio") @db.Time()
  endTime   DateTime @map("horario_fim") @db.Time()

  weeklyScheduleId String         @map("id_agenda_semanal") @db.Uuid
  weeklySchedule   WeeklySchedule @relation(fields: [weeklyScheduleId], references: [id])

  @@map("restricoes_agenda_semanal")
}

model ScheduleLock {
  id        String   @id @db.Uuid
  startTime DateTime @map("horario_inicio") @db.Time()
  endTime   DateTime @map("horario_fim") @db.Time()
  date      DateTime @map("data") @db.Date

  professionalId String       @map("id_profissional") @db.Uuid
  professional   Professional @relation(fields: [professionalId], references: [id])

  @@map("restricoes_horario")
}

model Appointment {
  id              String   @id @db.Uuid
  status          Int      @map("situacao") @db.SmallInt
  appointmentDate DateTime @map("data_agendamento") @db.Timestamp()
  updatedAt       DateTime @map("data_ultima_atualizacao") @db.Timestamp()
  createdAt       DateTime @default(now()) @map("data_criacao") @db.Timestamp()
  comments        String?  @map("observacoes") @db.Text

  patientId String  @map("id_paciente") @db.Uuid
  patient   Patient @relation(fields: [patientId], references: [id])

  professionalId String       @map("id_profissional") @db.Uuid
  professional   Professional @relation(fields: [professionalId], references: [id])

  employeeId String @map("id_funcionario") @db.Uuid
  employee   User   @relation(fields: [employeeId], references: [id])

  @@map("consulta")
}
